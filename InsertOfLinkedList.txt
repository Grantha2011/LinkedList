#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        this->data = value;
        this->next = NULL;
    }
};

Node* insertAtHead(int value, Node* &head, Node* &tail) {
    // Linked list is empty
    if (head == NULL && tail == NULL) {
        Node* newnode = new Node(value);
        head = newnode;
        tail = newnode;
    } else {
        // If linked list is not empty
        Node* newnode = new Node(value);
        newnode->next = head;
        head = newnode;
    }
    return head;
}

//------------INSERT AT TAIL---------------------------------//

void insertAtTail(int value, Node* &head, Node* &tail) {
    if (head == NULL && tail == NULL) {
        Node* newnode = new Node(value);
        head = newnode;
        tail = newnode;
    } else {
        Node* newnode = new Node(value);
        tail->next = newnode;
        tail = newnode;
    }
}

//---------------PRINT-FUNCTION-------------------------------//

void print(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL" << endl;
}

//------------------LENGTH-FUNCTION---------------------------//

int getLength(Node* head) {
    int len = 0;
    Node* temp = head;
    while (temp != NULL) {
        temp = temp->next;
        len++;
    }
    return len;
}

//---------------------INSERT-AT-POSITION----------------------//

void insertAtPosition(int value, int position, Node* &head, Node* &tail) {
    int length = getLength(head);
    if (position == 1) {
        head = insertAtHead(value, head, tail);
    } else if (position == length + 1) {
        insertAtTail(value, head, tail);
    } else {
        Node* temp = head;
        for (int i = 0; i < position - 2; i++) {
            temp = temp->next;
        }
        Node* newnode = new Node(value);
        newnode->next = temp->next;
        temp->next = newnode;
    }
}

int main() {
    Node* head = NULL;
    Node* tail = NULL;

    insertAtHead(10, head, tail);
    insertAtTail(20, head, tail);
    insertAtTail(30, head, tail);
    insertAtPosition(15, 2, head, tail);

    print(head);

    return 0;
}

